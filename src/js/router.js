import CustomEvents from './customEvents.js';

const DEFAULT_ROUTE = '/?view=table';
const URL_ENTRIES = [];

/**
 * Router class for url manipulation and navigation
 */
export default class Router {
  /** Navigate to new URL */
  static init() {
    Router.routerEvents();

    // Default router
    if (!window.location.search) {
      window.history.replaceState({
        view: 'table'
      }, '', DEFAULT_ROUTE);
    } else {
      Router.initialUrlParse();
    }
  }

  static get entries() {
    return URL_ENTRIES;
  }

  /**
   * Get URL-param
   * @param {string} name - param name
   * @return {string}
   */
  static getParam(name) {
    const params = new URLSearchParams(window.location.search);
    return params.get(name);
  }

  /**
   * Delete URL-param
   * @param {string} name - url param name
   */
  static deleteParam(name) {
    const params = new URLSearchParams(window.location.search);
    params.delete(name);
    window.history.replaceState({}, '', location.pathname + '?' + params);
  }

  /**
   * Set URL-param
   * @param {*} name - param name
   * @param {*} value - param value
   * @param {boolean} keepOld - should the value be replacer (default is added)
   */
  static setParam(name, value, keepOld = false) {
    if (value) {
      const params = new URLSearchParams(window.location.search);
      const prevValue = keepOld ? params.get(name) : '';
      const newValue = (prevValue ? prevValue : '') + value.toString();

      params.set(name, newValue);
      window.history.replaceState({}, '', location.pathname + '?' + params);
    }
  }

  /**
   * Load initial url and check for previously loaded entries
   * @example
   * url https://summary.site.com?view=table?entry15=2,3,4,4
   * Each entry consists of 5 params joined by ',' => 15,2,3,4,4
   * entry15 (15) - entry id (random generated by creation)
   * Second number (2) - PLATFORM dropdown (PLATFORM id)
   * Third number (3) - DEVICE dropdown (DEVICE id)
   * Fourth number (4) - GAME dropdown (GAME id)
   * Fifth number (4) - BUILD dropdown (BUILD id)
   */
  static initialUrlParse() {
    const params = new URLSearchParams(window.location.search);

    // Match loaded entries
    const loadedEntries = params.toString().match(/entry[\d]+/g);
    if (loadedEntries) {
      loadedEntries.forEach((entry) => {
        // Entry data needed for creation
        const entryData = {
          id: entry.match(/\d+$/)[0],
          dropdowns: Router.getParam(entry)
        };

        URL_ENTRIES.push(entryData);
      });
    }
  }

  static routerEvents() {
    /**
     * Add entry event
     * @param {object} data - entry data containing requestData from the dropdown menus
     */
    CustomEvents.addListener('sidebar.addEntry', (data) => {
      const entryData = data.requestData;
      Router.setParam('entry' + data.id, entryData, true);
    });

    /** Delete entry information
     * @param {object} entryId
     */
    CustomEvents.addListener('header.deleteEntry', (entryId) => {
      Router.deleteParam('entry' + entryId);
    });
  }
}